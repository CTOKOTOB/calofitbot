import asyncio
import os
import json
import time
import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from jwt import encode as jwt_encode
from cryptography.hazmat.primitives import serialization
from aiogram.utils.keyboard import InlineKeyboardBuilder


HELP_TEXT = """
üçè <b>CaloFitBot - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π</b>

–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –±—ã–ª–æ –≤ —ç—Ç–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –±–ª—é–¥–∞, –∏ —è —É—Ç–æ—á–Ω—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—é –≤ –±–∞–∑—É

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/del - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
/report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å

<b>–õ–∏–º–∏—Ç—ã:</b> –ù–µ –±–æ–ª–µ–µ 40 –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å

"""

SYSTEM_PROMPT = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º ‚Äî —Å–∫–æ–ª—å–∫–æ –≤ –Ω—ë–º –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π. –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞ –∏–ª–∏ –±–ª—é–¥–æ, —Ç–æ —Å—Ç–æ–∏—Ç —Å—á–∏—Ç–∞—Ç—å –Ω–µ –∑–∞ 100–≥—Ä–∞–º–º, –∞ –∑–∞ –ø–æ—Ä—Ü–∏—é."

YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
FOLDER_ID = "b1gjo1fm56glmpd0hs5r"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=os.environ["CALOFITBOT_TOKEN"])
dp = Dispatcher()
db_pool = None
YANDEX_API_KEY = None

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(dsn=os.environ["DATABASE_URL"])

async def get_iam_token_from_keyfile(path_to_keyfile: str) -> str:
    with open(path_to_keyfile, 'r') as f:
        key_data = json.load(f)

    private_key = serialization.load_pem_private_key(
        key_data["private_key"].encode(),
        password=None
    )

    payload = {
        "aud": "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        "iss": key_data["service_account_id"],
        "iat": int(time.time()),
        "exp": int(time.time()) + 360
    }

    headers = {"kid": key_data["id"]}
    encoded_jwt = jwt_encode(payload, private_key, algorithm="PS256", headers=headers)

    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://iam.api.cloud.yandex.net/iam/v1/tokens",
            json={"jwt": encoded_jwt}
        ) as resp:
            resp.raise_for_status()
            result = await resp.json()
            return result["iamToken"]

async def query_yandex_gpt(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {"stream": False, "temperature": 0.3, "maxTokens": 20},
        "messages": [
            {"role": "system", "text": SYSTEM_PROMPT},
            {"role": "user", "text": prompt}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(YANDEX_GPT_URL, headers=headers, json=data) as resp:
            result = await resp.json()
            try:
                text = result["result"]["alternatives"][0]["message"]["text"]
                return ''.join(filter(str.isdigit, text))
            except Exception:
                return "?"


async def get_or_create_user(user_obj) -> int:
    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", user_obj.id)
        if user:
            return user["id"]
        return await conn.fetchval(
            "INSERT INTO users (telegram_id, username, first_name, last_name) VALUES ($1, $2, $3, $4) RETURNING id",
            user_obj.id,
            user_obj.username,
            user_obj.first_name,
            user_obj.last_name,
        )


async def log_calories(user_id: int, input_text: str, calories: int | None, message: Message):
    async with db_pool.acquire() as conn:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_count = await conn.fetchval(
                "SELECT COUNT(*) FROM calories "
                "WHERE user_id = $1 AND created_at >= current_date",
                user_id
            )

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 35+ –∑–∞–ø–∏—Å—è—Ö
            if 35 <= today_count < 40:
                warning = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å {40 - today_count} –∏–∑ 40 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                await message.reply(warning)

            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if today_count >= 40:
                raise ValueError("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ 40 –∑–∞–ø–∏—Å–µ–π")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            await conn.execute(
                "INSERT INTO calories (user_id, input, calories) "
                "VALUES ($1, $2, $3)",
                user_id, input_text, calories
            )

        except asyncpg.exceptions.CheckViolationError:
            raise ValueError("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ 40 –∑–∞–ø–∏—Å–µ–π")




@dp.message(CommandStart())
async def handle_start(message: Message):
    user_id = await get_or_create_user(message.from_user)
    #await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —á–µ–ª–æ–≤–µ–∫! –Ø - –±–æ—Ç, —Å–≤–µ—Ä—Ö—Ä–∞–∑—É–º–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–∏—Ä–∞. –ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –±—ã–ª–æ –≤ —ç—Ç–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –±–ª—é–¥–∞, –∏ —è —É—Ç–æ—á–Ω—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—é –≤ –±–∞–∑—É")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Ç—ã —Å—ä–µ–ª ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ. –ù–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ? –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, —è —Å–∞–º –ø–æ—Å—á–∏—Ç–∞—é –∏ –¥–æ–±–∞–≤–ª—é –≤ –±–∞–∑—É.")


@dp.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(HELP_TEXT, parse_mode="HTML")


@dp.message(Command("del"))
async def handle_delete_last_entry(message: Message):
    user_id = await get_or_create_user(message.from_user)

    async with db_pool.acquire() as conn:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            deleted_entry = await conn.fetchrow(
                """DELETE FROM calories
                WHERE id = (
                    SELECT id FROM calories
                    WHERE user_id = $1
                    ORDER BY created_at DESC
                    LIMIT 1
                )
                RETURNING input, calories, created_at""",
                user_id
            )

            if deleted_entry:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª—ë–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                entry_info = (
                    f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\n"
                    f"üçΩ {deleted_entry['input']}\n"
                    f"üî• {deleted_entry['calories'] or '?'} –∫–∫–∞–ª\n"
                    f"‚è∞ {deleted_entry['created_at'].strftime('%d.%m.%Y %H:%M')}"
                )
                await message.reply(entry_info)
            else:
                await message.reply("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
            print(f"Delete error for user {user_id}: {str(e)}")


@dp.message(Command("del_all"))
async def handle_delete_all_user_data(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data="confirm_delete")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")

    await message.reply(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "confirm_delete")
async def confirm_delete(callback: types.CallbackQuery):
    user_id = await get_or_create_user(callback.from_user)

    async with db_pool.acquire() as conn:
        await conn.execute("DELETE FROM users WHERE id = $1", user_id)
        await callback.message.edit_text("üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã!")

@dp.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery):
    await callback.message.edit_text("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.message(Command("report"))
async def handle_daily_report(message: Message):
    user_id = await get_or_create_user(message.from_user)

    async with db_pool.acquire() as conn:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–ª—É–Ω–æ—á–∏)
            today_entries = await conn.fetch(
                """SELECT input, calories, created_at
                FROM calories
                WHERE user_id = $1
                AND created_at >= current_date
                ORDER BY created_at""",
                user_id
            )

            if not today_entries:
                await message.reply("üìä –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
            report_lines = ["üìÖ <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b> üìÖ\n"]
            total_calories = 0

            for entry in today_entries:
                time_str = entry['created_at'].strftime('%H:%M')
                calories = entry['calories'] or 0
                total_calories += calories

                report_lines.append(
                    f"‚è∞ {time_str} | üçΩ {entry['input']} | üî• {calories if entry['calories'] else '?'} –∫–∫–∞–ª"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            report_lines.append(f"\n<b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:</b> üî• {total_calories} –∫–∫–∞–ª")

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            report_text = "\n".join(report_lines)
            if len(report_text) > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                parts = [report_text[i:i+4000] for i in range(0, len(report_text), 4000)]
                for part in parts:
                    await message.answer(part, parse_mode="HTML")
                    await asyncio.sleep(0.5)  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞
            else:
                await message.answer(report_text, parse_mode="HTML")

        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            print(f"Report error for user {user_id}: {str(e)}")



@dp.message()
async def handle_text(message: Message):
    user_id = await get_or_create_user(message.from_user)
    input_text = message.text.strip()

    try:
        if input_text.isdigit():
            await log_calories(user_id, input_text, int(input_text), message)
            await message.reply(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {input_text} –∫–∫–∞–ª")
        else:
            calories_str = await query_yandex_gpt(input_text)
            calories = int(calories_str) if calories_str.isdigit() else None
            await log_calories(user_id, input_text, calories, message)
            await message.reply(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {calories or '?'} –∫–∫–∞–ª" +
                              (" (–ø—Ä–∏–º–µ—Ä–Ω–æ)" if calories else ""))

    except ValueError as e:
        await message.reply(str(e))
    except Exception as e:
        await message.reply("üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        print(f"Error for user {user_id}: {str(e)}")


async def main():
    global YANDEX_API_KEY
    await init_db()
    YANDEX_API_KEY = await get_iam_token_from_keyfile("key.json")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
