import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

import json
import jwt
import time
import requests

# –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
HELP_TEXT = """
üçè <b>CaloFitBot - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π</b>

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –µ–≥–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "—è–±–ª–æ–∫–æ" - –ø–æ–ª—É—á–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
‚Ä¢ –ò–ª–∏ "–ø–æ—Ä—Ü–∏—è —Å–ø–∞–≥–µ—Ç—Ç–∏" - –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –ø–æ—Ä—Ü–∏—é
"""

def get_iam_token_from_keyfile(path_to_keyfile: str) -> str:
    with open(path_to_keyfile, 'r') as f:
        key_data = json.load(f)

    service_account_id = key_data['service_account_id']
    key_id = key_data['id']
    private_key = key_data['private_key']

    now = int(time.time())
    payload = {
        'aud': 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        'iss': service_account_id,
        'iat': now,
        'exp': now + 360,
    }

    encoded_jwt = jwt.encode(payload, private_key, algorithm='PS256', headers={'kid': key_id})

    response = requests.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        json={'jwt': encoded_jwt}
    )

    response.raise_for_status()
    return response.json()['iamToken']

YANDEX_API_KEY = get_iam_token_from_keyfile("key.json")
FOLDER_ID = "b1gjo1fm56glmpd0hs5r"
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ aiogram
bot = Bot(token=os.environ["CALOFITBOT_TOKEN"])
dp = Dispatcher()

SYSTEM_PROMPT = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º ‚Äî —Å–∫–æ–ª—å–∫–æ –≤ –Ω—ë–º –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π. –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞ –∏–ª–∏ –±–ª—é–¥–æ, —Ç–æ —Å—Ç–æ–∏—Ç —Å—á–∏—Ç–∞—Ç—å –Ω–µ –∑–∞ 100–≥—Ä–∞–º–º, –∞ –∑–∞ –ø–æ—Ä—Ü–∏—é."
async def query_yandex_gpt(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Bearer
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 20
        },
        "messages": [
            {"role": "system", "text": SYSTEM_PROMPT},
            {"role": "user", "text": prompt}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(YANDEX_GPT_URL, headers=headers, json=data) as resp:
            result = await resp.json()
            try:
                answer = result["result"]["alternatives"][0]["message"]["text"]
                return ''.join(filter(str.isdigit, answer))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", result)
                return "?"

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –±–ª—é–¥–æ, –∞ —è —Å–∫–∞–∂—É —Å–∫–æ–ª—å–∫–æ –≤ –Ω—ë–º –∫–∞–ª–æ—Ä–∏–π")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(HELP_TEXT, parse_mode="HTML")

@dp.message()
async def handle_message(message: Message):
    user_input = message.text.strip()
    calories = await query_yandex_gpt(user_input)
    await message.reply(calories or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())