import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.enums import ParseMode
import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
import json
import jwt
import time
import requests
from datetime import date

# –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
HELP_TEXT = """
üçè <b>CaloFitBot - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π</b>

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –µ–≥–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/set_weight - –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –≤–µ—Å
/my_stats - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "—è–±–ª–æ–∫–æ" - –ø–æ–ª—É—á–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
‚Ä¢ –ò–ª–∏ "–ø–æ—Ä—Ü–∏—è —Å–ø–∞–≥–µ—Ç—Ç–∏" - –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –ø–æ—Ä—Ü–∏—é
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –∫–∞–ª–æ—Ä–∏–∏
"""

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "dbname": "calorie_tracker",
    "user": "calorie_bot",
    "password": "calorie_bot",
    "host": "localhost",
    "port": "5432"
}


class Database:
    def __init__(self):
        self.conn = None

    async def connect(self):
        self.conn = psycopg2.connect(**DB_CONFIG)
        self.conn.autocommit = False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è

    async def get_user(self, telegram_id):
        with self.conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
            return cursor.fetchone()

    async def create_user(self, telegram_id, username, first_name, last_name):
        with self.conn.cursor() as cursor:
            try:
                cursor.execute(
                    "INSERT INTO users (telegram_id, username, first_name, last_name, registration_date) "
                    "VALUES (%s, %s, %s, %s, NOW()) RETURNING user_id",
                    (telegram_id, username, first_name, last_name)
                )
                user_id = cursor.fetchone()[0]
                self.conn.commit()
                return user_id
            except Exception as e:
                self.conn.rollback()
                print(f"Error creating user: {e}")
                raise

    async def update_user_profile(self, user_id, gender, height, birth_date):
        with self.conn.cursor() as cursor:
            cursor.execute(
                "UPDATE users SET gender = %s, height = %s, birth_date = %s WHERE user_id = %s",
                (gender, height, birth_date, user_id)
            )
            self.conn.commit()

    async def add_weight_record(self, user_id, weight):
        with self.conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO user_weight (user_id, weight, record_date) "
                "VALUES (%s, %s, CURRENT_DATE)",
                (user_id, weight)
            )
            self.conn.commit()

    async def add_calorie_record(self, user_id, food_name, calories):
        with self.conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO calorie_intake (user_id, food_name, calories, entry_date) "
                "VALUES (%s, %s, %s, %s, %s, %s, CURRENT_DATE)",
                (user_id, food_name, calories)
            )
            self.conn.commit()

    async def close(self):
        if self.conn:
            self.conn.close()


db = Database()


def get_iam_token_from_keyfile(path_to_keyfile: str) -> str:
    with open(path_to_keyfile, 'r') as f:
        key_data = json.load(f)

    service_account_id = key_data['service_account_id']
    key_id = key_data['id']
    private_key = key_data['private_key']

    now = int(time.time())
    payload = {
        'aud': 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        'iss': service_account_id,
        'iat': now,
        'exp': now + 360,
    }

    encoded_jwt = jwt.encode(payload, private_key, algorithm='PS256', headers={'kid': key_id})

    response = requests.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        json={'jwt': encoded_jwt}
    )

    response.raise_for_status()
    return response.json()['iamToken']


YANDEX_API_KEY = get_iam_token_from_keyfile("key.json")
FOLDER_ID = "b1gjo1fm56glmpd0hs5r"
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

bot = Bot(token=os.environ["CALOFITBOT_TOKEN"])
dp = Dispatcher()

SYSTEM_PROMPT = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º ‚Äî —Å–∫–æ–ª—å–∫–æ –≤ –Ω—ë–º –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π. –ù–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞ –∏–ª–∏ –±–ª—é–¥–æ, —Ç–æ —Å—Ç–æ–∏—Ç —Å—á–∏—Ç–∞—Ç—å –Ω–µ –∑–∞ 100–≥—Ä–∞–º–º, –∞ –∑–∞ –ø–æ—Ä—Ü–∏—é."


async def query_yandex_gpt(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 20
        },
        "messages": [
            {"role": "system", "text": SYSTEM_PROMPT},
            {"role": "user", "text": prompt}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(YANDEX_GPT_URL, headers=headers, json=data) as resp:
            result = await resp.json()
            try:
                answer = result["result"]["alternatives"][0]["message"]["text"]
                return ''.join(filter(str.isdigit, answer))
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:", result)
                return None


@dp.message(CommandStart())
async def start(message: Message):
    await db.connect()
    user = await db.get_user(message.from_user.id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = await db.create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):"
        )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    else:
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –¢—ã –º–æ–∂–µ—à—å:\n"
            "- –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π\n"
            "- –í–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏\n"
            "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /set_weight –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞"
        )


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(HELP_TEXT, parse_mode=ParseMode.HTML)


@dp.message(Command("set_weight"))
async def set_weight_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 68.5):")


@dp.message(F.text.regexp(r'^\d+([.,]\d+)?$').as_("weight"))
async def handle_weight_input(message: Message, weight: str):
    weight = float(weight.replace(',', '.'))
    user = await db.get_user(message.from_user.id)

    if user:
        await db.add_weight_record(user['user_id'], weight)
        await message.answer(f"‚úÖ –í–µ—Å {weight} –∫–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")


@dp.message()
async def handle_message(message: Message):
    user_input = message.text.strip()
    user = await db.get_user(message.from_user.id)

    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    # –ï—Å–ª–∏ –≤–≤–æ–¥ - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –∫–∞–ª–æ—Ä–∏–∏
    if user_input.replace('.', '').isdigit():
        calories = float(user_input)
        await db.add_calorie_record(user['user_id'], "–†—É—á–Ω–æ–π –≤–≤–æ–¥", calories)
        await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –∑–∞–ø–∏—Å–∞–Ω–æ {calories} –∫–∫–∞–ª")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    calories = await query_yandex_gpt(user_input)

    if calories:
        await db.add_calorie_record(user['user_id'], user_input, float(calories))
        await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –∑–∞–ø–∏—Å–∞–Ω–æ {calories} –∫–∫–∞–ª –∑–∞ '{user_input}'")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


async def main():
    await db.connect()
    await dp.start_polling(bot)
    await db.close()


if __name__ == "__main__":
    asyncio.run(main())