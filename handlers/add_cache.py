from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from db.database import get_or_create_user, get_db_pool
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton

router = Router()

class AddCacheStates(StatesGroup):
    waiting_for_input = State()
    waiting_for_calories = State()

back_button = KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
back_kb = ReplyKeyboardMarkup(keyboard=[[back_button]], resize_keyboard=True)

@router.message(F.text == "/add_cache")
async def cmd_add_cache(message: Message, state: FSMContext):
    await state.set_state(AddCacheStates.waiting_for_input)
    await message.answer(
        "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)*\n\n"
        "–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å ‚Äî –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ —É–≤–∏–¥–∏—Ç –∏ –Ω–µ —Å–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ.\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –±–ª—é–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GPT.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —á–∞—Å—Ç–æ –µ–¥–∏—Ç–µ ¬´–°–∞–ª–∞—Ç –ù–∏—Å—É–∞–∑¬ª –∏–ª–∏ ¬´–û–±–µ–¥ –≤ —Å—Ç–æ–ª–æ–≤–æ–π¬ª, "
        "–≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∑–¥–µ—Å—å.\n\n"
        "üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω):",
        parse_mode="Markdown",
        reply_markup=back_kb
    )

@router.message(AddCacheStates.waiting_for_input)
async def input_name(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    await state.update_data(input_text=message.text.strip())
    await state.set_state(AddCacheStates.waiting_for_calories)
    await message.answer("üî• –í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:", reply_markup=back_kb)

@router.message(AddCacheStates.waiting_for_calories)
async def input_calories(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AddCacheStates.waiting_for_input)
        await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ —Å–Ω–æ–≤–∞:", reply_markup=back_kb)
        return

    try:
        calories = int(message.text.strip())
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = await state.get_data()
    user_id = await get_or_create_user(message.from_user)
    input_text = data["input_text"]

    db_pool = get_db_pool()
    async with db_pool.acquire() as conn:
        exists = await conn.fetchval(
            "SELECT 1 FROM user_calorie_cache WHERE user_id = $1 AND LOWER(input) = LOWER($2)",
            user_id, input_text
        )
        if exists:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await conn.execute(
            "INSERT INTO user_calorie_cache (user_id, input, calories) VALUES ($1, $2, $3)",
            user_id, input_text, calories
        )

    await state.clear()
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à.", reply_markup=ReplyKeyboardRemove())
